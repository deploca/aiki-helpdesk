// <auto-generated />
using System;
using AIKI.CO.HelpDesk.WebAPI.Models;
using AIKI.CO.HelpDesk.WebAPI.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AIKI.CO.HelpDesk.WebAPI.Models.Migrations
{
    [DbContext(typeof(dbContext))]
    [Migration("20200901103157_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.AppConstant", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.HasKey("id", "companyid");

                    b.HasIndex("companyid");

                    b.ToTable("AppConstant");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.AppConstantItem", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("companyid")
                        .HasColumnType("uuid");

                    b.Property<AdditionalInfo[]>("additionalinfo")
                        .HasColumnType("jsonb");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<Guid>("appconstantid")
                        .HasColumnType("uuid");

                    b.Property<string>("value1")
                        .HasColumnType("text");

                    b.Property<string>("value2")
                        .HasColumnType("text");

                    b.HasKey("id", "companyid");

                    b.HasIndex("companyid");

                    b.HasIndex("appconstantid", "companyid");

                    b.ToTable("AppConstantItem");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Asset", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<AssetAdditionalInfo[]>("assetadditionalinfo")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("assetlocationid")
                        .HasColumnType("uuid");

                    b.Property<string>("assetnumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("assettypeid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<Guid?>("customerid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("deliverydate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("employeeid")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("customerid");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.AssetsView", b =>
                {
                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<string>("assetlocationid")
                        .HasColumnType("text");

                    b.Property<string>("assetnumber")
                        .HasColumnType("text");

                    b.Property<string>("assettypeid")
                        .HasColumnType("text");

                    b.Property<Guid?>("companyid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("customerid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("deliverydate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.ToTable("AssetsView");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Company", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("subdomain")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Customer", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<string>("description")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<bool?>("disabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<string>("domains")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("operatinghourid")
                        .HasColumnType("uuid");

                    b.Property<byte?[]>("schema")
                        .HasColumnType("smallint[]");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Group", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<string>("agents")
                        .HasColumnType("text");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("leader")
                        .HasColumnType("text");

                    b.Property<Guid?>("operatinghourid")
                        .HasColumnType("uuid");

                    b.Property<string>("supportemail")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Last30Ticket", b =>
                {
                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("companyid")
                        .HasColumnType("uuid");

                    b.Property<int>("count")
                        .HasColumnType("integer");

                    b.Property<string>("da")
                        .HasColumnType("text");

                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.ToTable("Last30Ticket");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Member", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<bool?>("disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("membername")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("roles")
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("username")
                        .IsUnique();

                    b.ToTable("Member");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.OperatingHour", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<Holiday[]>("holidays")
                        .HasColumnType("jsonb");

                    b.Property<bool?>("isdefault")
                        .HasColumnType("boolean");

                    b.Property<string>("timezone")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.Property<Workday[]>("workdays")
                        .HasColumnType("jsonb");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("OperatingHour");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.OrganizeChart", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<OrganizeChartAdditionalInfo[]>("additionalinfo")
                        .HasColumnType("jsonb");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<Guid>("customerid")
                        .HasColumnType("uuid");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<Guid?>("parent_id")
                        .HasColumnType("uuid");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.Property<string>("titletype")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("customerid");

                    b.HasIndex("parent_id");

                    b.ToTable("OrganizeChart");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.OrganizeCharts_JsonView", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("companyid")
                        .HasColumnType("uuid");

                    b.Property<string>("organizecharts")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("OrganizeCharts_JsonView");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<byte[]>("filecontent")
                        .HasColumnType("bytea");

                    b.Property<string>("filextension")
                        .HasColumnType("text");

                    b.Property<Guid>("memberid")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("memberid");

                    b.ToTable("ProfilePicture");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.SLASetting", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<Guid?>("operatinghourid")
                        .HasColumnType("uuid");

                    b.Property<RequestTypePriority[]>("requesttypepriority")
                        .HasColumnType("jsonb");

                    b.Property<TargetsPriority[]>("targetspriority")
                        .HasColumnType("jsonb");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("SLASetting");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Ticket", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<string>("asset")
                        .HasColumnType("text");

                    b.Property<Guid?>("companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<Guid?>("customerid")
                        .HasColumnType("uuid");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("enddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("mandays")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("operateid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("registerdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("requester")
                        .HasColumnType("uuid");

                    b.Property<string>("requestpriority")
                        .HasColumnType("text");

                    b.Property<Guid>("ticketcategory")
                        .HasColumnType("uuid");

                    b.Property<double?>("ticketrate")
                        .HasColumnType("double precision");

                    b.Property<Guid>("tickettags")
                        .HasColumnType("uuid");

                    b.Property<Guid>("tickettype")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("customerid");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.TicketCountInfo", b =>
                {
                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("companyid")
                        .HasColumnType("uuid");

                    b.Property<int>("count")
                        .HasColumnType("integer");

                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("tickettype")
                        .HasColumnType("uuid");

                    b.ToTable("TicketCountInfo");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.TicketHistory", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<string>("agentname")
                        .HasColumnType("text");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<string>("historycomment")
                        .HasColumnType("text");

                    b.Property<DateTime>("historydate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ticketid")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("ticketid");

                    b.ToTable("TicketHistory");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.TicketsView", b =>
                {
                    b.Property<string>("agentname")
                        .HasColumnType("text");

                    b.Property<bool?>("allowdelete")
                        .HasColumnType("boolean");

                    b.Property<string>("asset")
                        .HasColumnType("text");

                    b.Property<Guid?>("companyid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("customerid")
                        .HasColumnType("uuid");

                    b.Property<string>("customertitle")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("enddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<string>("lasthistorycomment")
                        .HasColumnType("text");

                    b.Property<double?>("mandays")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("operateid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("registerdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("requester")
                        .HasColumnType("text");

                    b.Property<string>("requestpriority")
                        .HasColumnType("text");

                    b.Property<string>("ticketcategory")
                        .HasColumnType("text");

                    b.Property<string>("ticketfriendlynumber")
                        .HasColumnType("text");

                    b.Property<double?>("ticketrate")
                        .HasColumnType("double precision");

                    b.Property<string>("tickettags")
                        .HasColumnType("text");

                    b.Property<string>("tickettype")
                        .HasColumnType("text");

                    b.ToTable("TicketsView");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.AppConstant", b =>
                {
                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Company", "Company")
                        .WithMany("AppConstants")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.AppConstantItem", b =>
                {
                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Company", "Company")
                        .WithMany("AppConstantItems")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.AppConstant", "AppConstant")
                        .WithMany("AppConstantItems")
                        .HasForeignKey("appconstantid", "companyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Asset", b =>
                {
                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Company", "Company")
                        .WithMany("Assets")
                        .HasForeignKey("companyid");

                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Customer", "Customer")
                        .WithMany("Assets")
                        .HasForeignKey("customerid");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Customer", b =>
                {
                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Company", "Company")
                        .WithMany("Customers")
                        .HasForeignKey("companyid");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Group", b =>
                {
                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Company", "Company")
                        .WithMany("Groups")
                        .HasForeignKey("companyid");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Member", b =>
                {
                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Company", "Company")
                        .WithMany("Members")
                        .HasForeignKey("companyid");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.OperatingHour", b =>
                {
                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Company", "Company")
                        .WithMany("OperatingsHour")
                        .HasForeignKey("companyid");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.OrganizeChart", b =>
                {
                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Company", "Company")
                        .WithMany("OrganizeCharts")
                        .HasForeignKey("companyid");

                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Customer", "Customer")
                        .WithMany("OrganizeCharts")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.OrganizeChart", "ParentOrganizeChart")
                        .WithMany("OrganizeCharts")
                        .HasForeignKey("parent_id");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.ProfilePicture", b =>
                {
                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Company", "Company")
                        .WithMany("ProfilePictures")
                        .HasForeignKey("companyid");

                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Member", "Member")
                        .WithMany("ProfilePictures")
                        .HasForeignKey("memberid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.SLASetting", b =>
                {
                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Company", "Company")
                        .WithMany("SLASettings")
                        .HasForeignKey("companyid");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Ticket", b =>
                {
                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Company", "Company")
                        .WithMany("Tickets")
                        .HasForeignKey("companyid");

                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("customerid");
                });

            modelBuilder.Entity("AIKI.CO.HelpDesk.WebAPI.Models.Entities.TicketHistory", b =>
                {
                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Company", "Company")
                        .WithMany("TicketHistory")
                        .HasForeignKey("companyid");

                    b.HasOne("AIKI.CO.HelpDesk.WebAPI.Models.Entities.Ticket", "Ticket")
                        .WithMany("TicketHistories")
                        .HasForeignKey("ticketid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
